use clap::{ArgAction, Parser};
use dotenvy::dotenv;
use std::env;

mod logger; // enables the log_debug!() and log_info!() macros

/*
    Includes the file generated by the build.rs script, which looks like:
    pub const GIT_COMMIT: &str = "c5f7034f79bc3d49c1a9fb81c7cac6a8a778c5c3";
*/
include!(concat!(env!("OUT_DIR"), "/git_commit.rs"));

// - argument-handling ----------------------------------------------
#[derive(Parser)]
#[command(
    // version = "1.0",
    version = GIT_COMMIT,
    author = "Author Name <email@example.com>",
    about = "Runs \"update\" or \"report\" bookplate-scripts based on the provided arguments."
)]
struct Args {
    /// Run report script
    #[arg(long, action = ArgAction::SetTrue)]
    report: bool,

    /// Run update script
    #[arg(long, action = ArgAction::SetTrue)]
    update: bool,

    /// Run both report and update scripts
    #[arg(long, action = ArgAction::SetTrue)]
    both: bool,
} // end argument-handling ------------------------------------------

// - manages report-run ---------------------------------------------
fn run_report() {
    println!("will generate report");
    // ...
}

// - manages daily-db-update ----------------------------------------
fn run_daily_db_update() {
    println!("will update daily db");
    // ...
}

// - main -----------------------------------------------------------
fn main() {
    // - load envars ------------------------------------------------
    dotenv().ok();
    let _marc_daily_files_dir: String =
        env::var("MARC_DAILY_DIR").expect("MARC_DAILY_DIR envar could not be retrieved.");
    let _marc_full_files_dir: String =
        env::var("MARC_FULL_DIR").expect("MARC_FULL_DIR envar could not be retrieved.");

    // - set up logger ----------------------------------------------
    logger::init_logger().expect("Unable to initialize logger");
    log_debug!("logging configured.");

    // - parse args --------------------------------------------------
    let args = Args::parse();
    if !args.report && !args.update && !args.both {
        println!("Please provide either the --update, --report, or --both argument.");
        std::process::exit(1);
    }

    // - run scripts ------------------------------------------------
    if args.report || args.both {
        run_report();
    }
    if args.update || args.both {
        run_daily_db_update();
    }
}
