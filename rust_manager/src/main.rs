use clap::{ArgAction, Parser};

/*
    Includes the file generated by the build.rs script, which looks like:
    pub const GIT_COMMIT: &str = "c5f7034f79bc3d49c1a9fb81c7cac6a8a778c5c3";
*/
include!(concat!(env!("OUT_DIR"), "/git_commit.rs"));

/// This app runs different scripts based on the provided arguments
#[derive(Parser)]
#[command(
    // version = "1.0",
    version = GIT_COMMIT,
    author = "Author Name <email@example.com>",
    about = "Runs \"update\" or \"report\" bookplate-scripts based on the provided arguments."
)]
struct Args {
    /// Run report script
    #[arg(long, action = ArgAction::SetTrue)]
    report: bool,

    /// Run update script
    #[arg(long, action = ArgAction::SetTrue)]
    update: bool,

    /// Run both report and update scripts
    #[arg(long, action = ArgAction::SetTrue)]
    both: bool,
}

fn run_report() {
    println!("will generate report");
    // ...
}

fn run_daily_db_update() {
    println!("will update daily db");
    // ...
}

fn main() {
    let args = Args::parse();

    if !args.report && !args.update && !args.both {
        println!("Please provide either the --update, --report, or --both argument.");
        std::process::exit(1);
    }

    if args.report || args.both {
        run_report();
    }
    if args.update || args.both {
        run_daily_db_update();
    }
}
