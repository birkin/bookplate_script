use clap::{ArgAction, Parser};
use dotenvy::dotenv;
use std::env;

mod helpers;
mod logger; // enables the log_debug!() and log_info!() macros // contains the sort_files() function

/*
    Includes the file generated by the build.rs script, which looks like:
    pub const GIT_COMMIT: &str = "c5f7034f79bc3d49c1a9fb81c7cac6a8a778c5c3";
*/
include!(concat!(env!("OUT_DIR"), "/git_commit.rs"));

// - argument-handling ----------------------------------------------
#[derive(Parser)]
#[command(
    // version = "1.0",
    version = GIT_COMMIT,
    author = "Author Name <email@example.com>",
    about = "Runs \"update\" or \"report\" bookplate-scripts based on the provided arguments."
)]
struct Args {
    #[arg(long, action = ArgAction::SetTrue)]
    report: bool,
    #[arg(long, action = ArgAction::SetTrue)]
    update: bool,
    #[arg(long, action = ArgAction::SetTrue)]
    both: bool,
} // end argument-handling ------------------------------------------

// - manages report-run ---------------------------------------------
fn run_report(marc_full_source_files_dir: &str, marc_full_output_files_dir: &str) {
    // list the .tar.gz files ---------------------------------------
    let unsorted_compressed_marc_files: Vec<std::path::PathBuf> =
        std::fs::read_dir(marc_full_source_files_dir)
            .expect("Unable to read directory")
            .map(|res| res.map(|e| e.path()))
            .collect::<Result<Vec<_>, std::io::Error>>()
            .expect("Unable to collect files");
    log_debug!(
        "first 3 unsorted_compressed_marc_files: {:?}",
        &unsorted_compressed_marc_files[0..3]
    );

    // get a sorted list --------------------------------------------
    let mut compressed_marc_files: Vec<std::path::PathBuf> =
        helpers::sort_files(unsorted_compressed_marc_files);
    log_debug!(
        "first 3 sorted_compressed_marc_files: {:?}",
        &compressed_marc_files[0..3]
    );

    // loop through list --------------------------------------------
    //      // decompress & write file ------------------------------

    println!("will generate report");
}

// - manages daily-db-update ----------------------------------------
fn run_daily_db_update() {
    println!("will update daily db");
    // ...
}

// - main -----------------------------------------------------------
fn main() {
    // - load envars ------------------------------------------------
    dotenv().ok();
    let _marc_daily_source_files_dir: String = env::var("MARC_DAILY_SOURCE_DIR")
        .expect("MARC_DAILY_SOURCE_DIR envar could not be retrieved.");
    let marc_full_source_files_dir: String = env::var("MARC_FULL_SOURCE_DIR")
        .expect("MARC_FULL_SOURCE_DIR envar could not be retrieved.");
    let marc_full_output_files_dir: String = env::var("MARC_FULL_OUTPUT_DIR")
        .expect("MARC_FULL_OUTPUT_DIR envar could not be retrieved.");

    // - set up logger ----------------------------------------------
    logger::init_logger().expect("Unable to initialize logger");
    log_debug!("logging configured.");

    // - parse args --------------------------------------------------
    let args = Args::parse();
    if !args.report && !args.update && !args.both {
        println!("Please provide either the --update, --report, or --both argument.");
        std::process::exit(1);
    }

    // - run scripts ------------------------------------------------
    if args.report || args.both {
        run_report(&marc_full_source_files_dir, &marc_full_output_files_dir);
    }
    if args.update || args.both {
        run_daily_db_update();
    }
}
